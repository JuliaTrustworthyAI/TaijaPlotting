var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TaijaPlotting","category":"page"},{"location":"#TaijaPlotting","page":"Home","title":"TaijaPlotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TaijaPlotting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TaijaPlotting]","category":"page"},{"location":"#TaijaPlotting.PlotIngredients","page":"Home","title":"TaijaPlotting.PlotIngredients","text":"A container used for plotting.\n\n\n\n\n\n","category":"type"},{"location":"#RecipesBase.plot-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"RecipesBase.plot","text":"Plots.plot(\n    ce::CounterfactualExplanation;\n    alpha_ = 0.5,\n    plot_up_to::Union{Nothing,Int} = nothing,\n    plot_proba::Bool = false,\n    kwargs...,\n)\n\nCalling plot on an instance of type CounterfactualExplanation returns a plot that visualises the entire counterfactual path. For multi-dimensional input data, the data is first compressed into two dimensions. The decision boundary is then approximated using using a Nearest Neighbour classifier. This is still somewhat experimental at the moment.\n\nExamples\n\n# Search:\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\n\nplot(ce)\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.animate_path","page":"Home","title":"TaijaPlotting.animate_path","text":"animate_path(ce::CounterfactualExplanation, path=tempdir(); plot_proba::Bool=false, kwargs...)\n\nReturns and animation of the counterfactual path.\n\nExamples\n\n# Search:\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\n\nanimate_path(ce)\n\n\n\n\n\n","category":"function"},{"location":"#TaijaPlotting.embed_path-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"TaijaPlotting.embed_path","text":"embed_path(ce::CounterfactualExplanation)\n\nHelper function that embeds path into two dimensions for plotting.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.plot_state-Tuple{CounterfactualExplanations.CounterfactualExplanation, Int64, Bool}","page":"Home","title":"TaijaPlotting.plot_state","text":"plot_state(\n    ce::CounterfactualExplanation,\n    t::Int,\n    final_sate::Bool;\n    kwargs...\n)\n\nHelper function that plots a single step of the counterfactual path.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.set_up_plots-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"TaijaPlotting.set_up_plots","text":"set_up_plots(\n    ce::CounterfactualExplanation;\n    alpha,\n    plot_proba,\n    kwargs...\n)\n\nA helper method that prepares data for plotting.\n\n\n\n\n\n","category":"method"}]
}
