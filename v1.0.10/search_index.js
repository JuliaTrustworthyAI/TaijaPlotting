var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TaijaPlotting","category":"page"},{"location":"#TaijaPlotting","page":"Home","title":"TaijaPlotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TaijaPlotting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TaijaPlotting]","category":"page"},{"location":"#TaijaPlotting.PlotIngredients","page":"Home","title":"TaijaPlotting.PlotIngredients","text":"A container used for plotting.\n\n\n\n\n\n","category":"type"},{"location":"#Plots.areaplot-Tuple{ConformalPrediction.ConformalProbabilisticSet, Any, Any, Any}","page":"Home","title":"Plots.areaplot","text":"Plots.areaplot(\n    conf_model::ConformalProbabilisticSet, fitresult, X, y;\n    input_var::Union{Nothing,Int,Symbol}=nothing,\n    kwargs...\n)\n\nA Plots.jl recipe/method extension that can be used to visualize the conformal predictions of any fitted conformal classifier. Using a stacked area chart, this function plots the softmax output(s) contained the the conformal predictions set on the vertical axis against an input variable X on the horizontal axis. In the case of multiple input variables, the input_var argument can be used to specify the desired input variable.\n\n\n\n\n\n","category":"method"},{"location":"#Plots.bar-Tuple{ConformalPrediction.ConformalModel, Any, Any}","page":"Home","title":"Plots.bar","text":"Plots.bar(conf_model::ConformalModel, fitresult, X; label=\"\", xtickfontsize=6, kwrgs...)\n\nA Plots.jl recipe/method extension that can be used to visualize the set size distribution of a conformal predictor. In the regression case, prediction interval widths are stratified into discrete bins. It can be useful to plot the distribution of set sizes in order to visually asses how adaptive a conformal predictor is. For more adaptive predictors the distribution of set sizes is typically spread out more widely, which reflects that “the procedure is effectively distinguishing between easy and hard inputs”. This is desirable: when for a given sample it is difficult to make predictions, this should be reflected in the set size (or interval width in the regression case). Since ‘difficult’ lies on some spectrum that ranges from ‘very easy’ to ‘very difficult’ the set size should vary across the spectrum of ‘empty set’ to ‘all labels included’.\n\n\n\n\n\n","category":"method"},{"location":"#Plots.contourf-Tuple{ConformalPrediction.ConformalProbabilisticSet, Any, Any, Any}","page":"Home","title":"Plots.contourf","text":"Plots.contourf(conf_model::ConformalModel,fitresult,X,y;kwargs...)\n\nA Plots.jl recipe/method extension that can be used to visualize the conformal predictions of a fitted conformal classifier with exactly two input variable. Data (X,y) are plotted as dots and overlaid with predictions sets. y is used to indicate the ground-truth labels of samples by colour. Samples are visualized in a two-dimensional feature space, so it is expected that X in mathcalR^2. By default, a contour is used to visualize the softmax output of the conformal classifier for the target label, where target indicates can be used to define the index of the target label. Transparent regions indicate that the prediction set does not include the target label. \n\nTarget\n\nIn the binary case, target defaults to 2, indexing the second label: assuming the labels are [0,1] then the softmax output for 1 is shown. In the multi-class cases, target defaults to the first class: for example, if the labels are [\"🐶\", \"🐱\", \"🐭\"] (in that order) then the contour indicates the softmax output for \"🐶\".\n\nSet Size\n\nIf plot_set_size is set to true, then the contour instead visualises the the set size.\n\nUnivariate and Higher Dimensional Inputs\n\nFor univariate of multiple inputs (>2), this function is not applicable. See Plots.areaplot(conf_model::ConformalProbabilisticSet, fitresult, X, y; kwargs...) for an alternative way to visualize prediction for any conformal classifier.\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.plot-Tuple{ConformalPrediction.ConformalInterval, Any, Any, Any}","page":"Home","title":"RecipesBase.plot","text":"Plots.plot(\n    conf_model::ConformalInterval, fitresult, X, y;\n    kwrgs...\n)\n\nA Plots.jl recipe/method extension that can be used to visualize the conformal predictions of a fitted conformal regressor. Data (X,y) are plotted as dots and overlaid with predictions intervals. y is plotted on the vertical axis against a single variable X on the horizontal axis. A shaded area indicates the prediction interval. The line in the center of the interval is the midpoint of the interval and can be interpreted as the point estimate of the conformal regressor. In case X is multi-dimensional, input_var can be used to specify the input variable of interest that will be used for the horizontal axis. If unspecified, the first variable will be plotting by default.\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.plot-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"RecipesBase.plot","text":"Plots.plot(\n    ce::CounterfactualExplanation;\n    alpha_ = 0.5,\n    plot_up_to::Union{Nothing,Int} = nothing,\n    plot_proba::Bool = false,\n    kwargs...,\n)\n\nCalling plot on an instance of type CounterfactualExplanation returns a plot that visualises the entire counterfactual path. For multi-dimensional input data, the data is first compressed into two dimensions. The decision boundary is then approximated using using a Nearest Neighbour classifier. This is still somewhat experimental at the moment.\n\nExamples\n\n# Search:\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\n\nplot(ce)\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.animate_path","page":"Home","title":"TaijaPlotting.animate_path","text":"animate_path(ce::CounterfactualExplanation, path=tempdir(); plot_proba::Bool=false, kwargs...)\n\nReturns and animation of the counterfactual path.\n\nExamples\n\n# Search:\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\n\nanimate_path(ce)\n\n\n\n\n\n","category":"function"},{"location":"#TaijaPlotting.embed_path-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"TaijaPlotting.embed_path","text":"embed_path(ce::CounterfactualExplanation)\n\nHelper function that embeds path into two dimensions for plotting.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.generate_lims-NTuple{5, Any}","page":"Home","title":"TaijaPlotting.generate_lims","text":"generate_lims(x1, x2, xlims, ylims)\n\nSmall helper function then generates the xlims and ylims for the plot.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.get_names-Tuple{Any}","page":"Home","title":"TaijaPlotting.get_names","text":"get_names(X)\n\nHelper function to get variables names of X.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.plot_state-Tuple{CounterfactualExplanations.CounterfactualExplanation, Int64, Bool}","page":"Home","title":"TaijaPlotting.plot_state","text":"plot_state(\n    ce::CounterfactualExplanation,\n    t::Int,\n    final_state::Bool;\n    kwargs...\n)\n\nHelper function that plots a single step of the counterfactual path.\n\n\n\n\n\n","category":"method"},{"location":"#TaijaPlotting.set_up_plots-Tuple{CounterfactualExplanations.CounterfactualExplanation}","page":"Home","title":"TaijaPlotting.set_up_plots","text":"set_up_plots(\n    ce::CounterfactualExplanation;\n    alpha,\n    plot_proba,\n    kwargs...\n)\n\nA helper method that prepares data for plotting.\n\n\n\n\n\n","category":"method"}]
}
